import os, glob

# import root environment
Import( ["buildenv", "installer"])
myenv = buildenv.Copy()
# get all the sourcefiles recursively
lls = myenv.SGlob("*.ll", recursive=True )
for f in lls:
    ff = myenv.CXXFile(File(f), CXXFILESUFFIX=".lcc")
    # hack to point include path to the builddir relative directory
    # where the lex/yacc file was found
    path = os.path.split(str(ff[0]))[0]
    myenv.AppendUnique(CPPPATH=[Dir(path)])

yys = myenv.SGlob("*.yy", recursive=True )
for f in yys:
    ff = myenv.CXXFile(File(f), CXXFILESUFFIX=".ycc")
    # hack to point include path to the builddir relative directory
    # where the lex/yacc file was found
    path = os.path.split(str(ff[0]))[0]
    myenv.AppendUnique(CPPPATH=[Dir(path)])

# get all the sourcefiles recursively
cpps = myenv.SGlob("*.cc", excludedirs=["test"], recursive=True )
# need this to go to the root dir, as SConscript assumes to be in the
# build dir
rootdir = myenv.Dir("#").abspath
libname = "casa_" + myenv["PACKAGE"]

slib =  myenv.StaticLibrary(target = libname, source = [cpps])
myenv.Alias(os.path.basename(os.path.normpath(str(slib[0]))), slib)
myenv.Alias("static", slib)
myenv.Default("static")

dlib =  myenv.SharedLibrary(target = libname, source = cpps)
myenv.Alias(os.path.basename(os.path.normpath(str(dlib[0]))), dlib)
myenv.Alias("shared", dlib)

if "shared" in BUILD_TARGETS:
    myenv.Prepend(LIBS=[libname+"_f"])
    myenv.PrependUnique(LIBPATH=[myenv["BUILDDIR_FORT"]])
    installer.AddLibrary(dlib)

if "static" in BUILD_TARGETS or "shared" not in BUILD_TARGETS:
    installer.AddLibrary(slib)

testenv = myenv.Copy()
# gather test files
# SGlob works in build dir, so only for cc files
tests = testenv.SGlob("test/*.cc")
tests += testenv.SGlob("*/test/*.cc")
# point to tests local includes
#testenv.PrependUnique(LIBPATH=[testenv["BUILDDIR_FORT"]])
testenv.PrependUnique(LIBPATH=[testenv["BUILDDIR"]])
sflib = myenv.File("fortran/"+myenv["LIBPREFIX"]+libname+"_f"+myenv["LIBSUFFIX"])
testenv.PrependUnique(LIBS=[slib, sflib])
for t in tests:
    testenv.addAssayTest(t)

# install headers, only works with absolute dir.
installer.AddHeaders( rootdir, "*.h", "casarest", True )
installer.AddHeaders( rootdir, "*.tcc", "casarest", True )
