import os
import sys

EnsureSConsVersion(1,1)

# Put the package name here, e.g. casa, tables
PACKAGE = "synthesis"
DEPS = ["casa", "mirlib", "tables", "scimath_f", "scimath",
        "measures", "fits", "ms", 
        "coordinates", "components", "lattices", "images",
        "msvis", "calibration"]

# general options
opts = Variables( 'options.cfg', ARGUMENTS )
opts.Add(PathVariable("casacoreroot", "The location of casacore/casa",
                    "/usr/local"))
opts.Add(PathVariable("casarestroot", "The location of casarest",
                    "/usr/local"))
opts.Add(("lapackroot", 
          "The root directory where lapack is installed", None))
opts.Add(("lapacklibdir", "The lapack library location", None))
opts.Add(("lapacklib",
          "The lapack library name (e.g. for specialized AMD libraries",
          None))
opts.Add(("blasroot", 
          "The root directory where blas is installed", None))
opts.Add(("blaslibdir", "The blas library location", None))
opts.Add(("blaslib",
          "The blas library name (e.g. for specialized AMD libraries",
          None))
opts.Add(("cfitsioroot", 
        "The root directory where cfistio is installed", None))
opts.Add(("cfitsiolibdir", "The cfitsio library location", None))
opts.Add(("cfitsioincdir", "The cfitsio header location", None))
opts.Add(("wcsroot", 
        "The root directory where wcs is installed", None))
opts.Add(("wcslibdir", "The wcs library location", None))
opts.Add(("hdf5root", 
	  "The root directory where hdf5 is installed", None))
opts.Add(("hdf5incdir", "The hdf5 header location", None))
opts.Add(("hdf5libdir", "The hdf5 library location", None))

env = Environment(ENV = { 'PATH' : os.environ[ 'PATH' ],
			  'HOME' : os.environ[ 'HOME' ] 
			  },
		  options=opts
		  )
# keep a local sconsign database, rather than in very directory
env.SConsignFile()

env["PACKAGE"] = PACKAGE

# use directory from casacore/casa installation
env["casaincdir"] = [os.path.join(env["casacoreroot"],"include","casacore")]
env["casalibdir"] = [os.path.join(env["casacoreroot"],"lib")]
env["casashrdir"] = [os.path.join(env["casacoreroot"],"share","casacore")]
env["casarestincdir"] = [os.path.join(env["casarestroot"],"include","casarest")]
env["casarestlibdir"] = [os.path.join(env["casarestroot"],"lib")]
env["casarestshrdir"] = [os.path.join(env["casarestroot"],"share","casarest")]

env.Tool('casaoptions', env["casashrdir"])
# Add common options
env.AddCommonOptions(opts)
env.AddFortranOptions(opts)
env.Tool('installer', env["casashrdir"])
# add installer options, e.g. prefix
env.AddInstallerOptions( opts )
# add them into environment
opts.Update( env )
# cache them for the next run
opts.Save( 'options.cfg', env)
Help( opts.GenerateHelpText( env ) )
env.Tool('buildenv', env["casashrdir"])
env.Tool('utils', env["casashrdir"])
env.Tool('casa', env["casashrdir"])
env.Tool('assaytest', env["casashrdir"])
env["ASSAYCOM"] = os.path.join(env["casashrdir"][0], "casacore_assay")

# Auto configure
if not env.GetOption('clean'):
    conf = Configure(env)
    conf.env.CheckFortran(conf)
    # test for blas/lapack
    blasname = conf.env.get("blaslib", "blas").split(",")
    conf.env.AddCustomPackage("blas")
    blasname.reverse()
    for b in blasname:
        if not conf.CheckLib(b, autoadd=0): Exit(1)
        conf.env.PrependUnique(LIBS=b)
    lapackname = conf.env.get("lapacklib", "lapack").split(",")
    conf.env.AddCustomPackage("lapack")
    lapackname.reverse()
    for l in lapackname:
        if not conf.CheckLib(l, autoadd=0): Exit(1)
        conf.env.PrependUnique(LIBS=l)

    # Test for cfitsio and wcs
    conf.env.AddCustomPackage('cfitsio')
    if not conf.CheckLib('cfitsio', autoadd=0):
	Exit(1)
    conf.env.PrependUnique(LIBS=['cfitsio'])  
    conf.env.AddCustomPackage('wcs')
    if not conf.CheckLibWithHeader('wcs', 'wcslib/wcs.h', language='c',
				   autoadd=0):
	Exit(1)
    conf.env.PrependUnique(LIBS=['wcs'])

    # HDF5 is not mandatory
    conf.env.AddCustomPackage('hdf5')
    if conf.CheckLib('hdf5', autoadd=0):
        conf.env.PrependUnique(LIBS=['hdf5'])  
    else:
        print "Building without HDF5 support"

    conf.env.PrependUnique(CPPFLAGS=['-DCASA_STANDALONE', '-DAIPS_NO_TEMPLATE_SRC'])
    env = conf.Finish()
else:
    Execute(Delete("options.cfg"))

# create the installer which handles installing the final build
installer = env.Installer()

# to find package based includes
env.Append(CPPPATH=['#'])
env.AppendUnique(CPPPATH=env["casaincdir"])
env.AppendUnique(CPPPATH=env["casarestincdir"])
env.AppendUnique(LIBPATH=env["casalibdir"])
env.AppendUnique(LIBPATH=env["casarestlibdir"])
for dep in DEPS:
    env.Prepend(LIBS=["casa_"+dep])

#env.CustomCasaCom()

for bopt in env["build"]:
    # create an environment copy with the dbg/opt compiler flags
    buildenv = env.BuildEnv(bopt)
    # buildir name
    buildenv["BUILDDIR"] = Dir("#/build_%s/%s" % (env.PlatformIdent(), bopt))
    buildenv["BUILDDIR_APPS"] = Dir("#/build_%s/%s/%s" % (env.PlatformIdent(), 
                                                    bopt, "apps"))
    env.SConscript(["%s/SConscript" % env["PACKAGE"]], 
		   build_dir= buildenv["BUILDDIR"],
		   duplicate=0, exports=["buildenv", "installer"]) 
    env.SConscript(["%s/SConscript" % "apps"],
                 duplicate=0, exports=["buildenv", "installer"],
                 build_dir=buildenv["BUILDDIR_APPS"])
